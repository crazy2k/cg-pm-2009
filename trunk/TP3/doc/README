
Unlike trunk/TP1, trunk/TP3 is a little more organized (at least, it's not the
mixture of two "TPs" ("Trabajos Prácticos", something like a "special
assignment" in English).

I'd dare to say the code in here is somewhat more polished too, since more
time has been devoted to it. Oh! And all the comments in the code are (or
should be) in English.

However, bear in mind that this code was written as a "special assignment" for
a subject ("Computación Gráfica", or Computer Graphics in English) of the
Computer Science Department of the University of Buenos Aires, with all that
that means:

    * Development time was limited: The assignment had to be completed in less
      than two months.
    * We learned as we made: This may justify some of our naive errors (not
      all, of course)
    * The main objective was learning: Although we tried to write good code
      (readable, robust, extensible), that wasn't one of our main objectives.

Beyond all this, I wouldn't mind maintaining this code and/or discussing
improvements for it. 

Pablo Antonio (pabloa at gmail dot com)

----

Computer Graphics: Final Special Assignment
===========================================

The present application is the result of the development of the Final
Special Assignment for the "Computación Gráfica" (Computer Graphics, in
English) subject of the Computer Science Department of the University of
Buenos Aires (UBA).

This application was developed in the first half of the year 2009 by:

* Pablo Antonio (pabloa AT gmail DOT com)
* Marta Ponzoni (martaponzoni AT gmail DOT com)

Installation
------------

This application was written entirely in Python. Thus, the Python
compiler/virtual machine is necessary to run it. Most of GNU/Linux
distributions already come with Python installed out of the box.

If you need to download Python, or want to get more information about its
installation procedure, refer to Python's official website:
http://www.python.org/

Besides Python, the application requires the following components to be
installed on the system:

1. wxPython
2. NumPy
3. PyOpenGL

wxPython is a wrapper for the API/toolkit wxWidgets (written in C++). When
testing, version 2.8.8.0, provided by Ubuntu's repositories (2.8.8.8-ubuntu2),
was used. To install it on Debian/Ubuntu, just invoke the command
``sudo apt-get install python-wxgtk2.8`` in the terminal. On Windows (or other
platforms) you have to get wxPython from its official site:
http://www.wxpython.org/

NumPy provides a large library with data structures and high-level mathematical
functions to Python. The most used components here were the matrices and its
associated operations, and the trigonometric functions sine and cosine. When
testing, version 1.2.1, provided by Ubuntu's repositories (1:1.2.1-1ubuntu1)
was used. To install it on Debian/Ubuntu, just invoke the command
``sudo apt-get install python-numpy`` in the terminal. On Windows (or other
platforms) you have to get NumPy from its official site:
http://numpy.scipy.org/

PyOpenGL is the binding to OpenGL. It's needed to do anything related to
OpenGL in Python. Version 3.0.0b6, provided by Ubuntu's repositories
(3.0.0~b6-3), was used when testing. Again, to install it on Debian/Ubuntu,
just invoke ``sudo apt-get install python-opengl`` in the terminal. If you're
on Windows (or other platforms), probably you have to get PyOpenGL from its
official site: http://pyopengl.sourceforge.net/


About the application
---------------------

How to run it
~~~~~~~~~~~~~

In order to run the application, the file main.py (which should be in
trunk/TP3/src/) must be executed using Python's compiler/virtual machine.
On GNU/Linux, invoking the command ``python main.py`` (when in the
path to main.py in the directory tree) will pretty likely be enough.

Organization of code (and documentation)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When situated in trunk/TP3/, we can see the following files/directories:

* *./src/*
    * *./main.py*: This is the main program. The wxPython application is created
      here.
    * *./core/*: Here we have the main parts of the application. The code for the
      main frame and its two most important parts (the canvas and the panel) is in
      glwindows.py. glfigures.py has the code for the different figures/surfaces
      that can be used, and the algorithm that generates the tree.
    * *./utils/transformations.py*: This is the place where some auxiliary
      functions (most are matrix-related) are defined.
    * *./view/panel.xrc*: This file has the XML which describes the user interface
      of our main panel.

* *./doc/*
    * *./README(.html)*: This file is the help file you're just reading.
    * *./presentation/*: Here are the files used for the presentation we gave
      for this final Special Assignment. It's mainly an index.html which
      contains the slides, and a PDF/PS that describes our implementation in
      terms of L-Systems.
